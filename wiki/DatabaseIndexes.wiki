#summary Improving connector performance by adding database indexes
#labels Featured,Phase-Deploy

= Introduction =

Connector performance can be dramatically improved by adding database indexes. This page describes the types of indexes that can improve performance, and how to decide what to index.

= Details =

We recommend analyzing the connector query performance, and then iteratively adding an index and remeasuring performance until query performance is acceptable. Usually the dm_sysobject queries are fast enough, and the dm_audittrail queries are not.

In general, the index over the fewest attributes that solves the problem is preferred, because indexes over multiple columns are slower for insertions. For the best overall system performance, you should choose the attribute(s) with the highest specificity and limit the index to those. Highest specificity here means the attribute whose use in the query restricts the results the most. 

For the dm_audittrail, it depends on the age of entries that are kept in the audit trail, and the types of events that are audited. Neither the event_name or time_stamp attributes are indexed by default. On small scale experiments, indexing either of them improved performance by at least a factor of ten. If you have an old docbase with a very large audit trail, you might try time_stamp first, or if you have a more recent, archival docbase with lots of activity but relatively few deletions, you might try event_name first.
{{{
EXECUTE make_index WITH type_name='dm_audittrail', attribute='time_stamp';
}}}

If query analysis shows that the dm_sysobject query needs to run faster, the attribute with the highest specificity is almost certainly r_modify_date:
{{{
EXECUTE make_index WITH type_name='dm_sysobject', attribute='r_modify_date';
}}}

= Optimal Indexes =

*Note:* These indexes may slow down other Documentum applications unnecessarily. There are given here for completeness, in case they are useful in some difficult database optimizations. These indexes provided the best performance and lowest optimizer costs during testing, but in most cases a smaller index will provide almost the same practical benefits. For example, the i_has_folder, i_is_deleted, and r_object_type attributes of dm_sysobject are generally of low specificity, and the index shown here has a lower optimizer cost, but did not provide a measurable improvement in query performance over the simpler index shown above.

In general, the order the attributes in the make_index function matters, and should match their appearance in the SQL queries.

{{{
EXECUTE make_index WITH type_name='dm_sysobject', attribute='i_has_folder',
    attribute='i_is_deleted', attribute='r_object_type', attribute='r_modify_date';

EXECUTE make_index WITH type_name='dm_audittrail', attribute='event_name', attribute='time_stamp';
}}}

= Additional WHERE clause =

If you add conditions to the WHERE clause of the dm_sysobject query, or modify the root object type, then you may need to alter your indexes as well. For example, you might introduce a highly restrictive condition on an attribute not listed here. If you edit the *Advanced Configuration* section of the connector configuration page in the Admin Console, you may need to reanalyze your database queries.